ingress:
  className: {{ dsc.ingress.className | default('') }}
  hosts:
    - {{ console_domain }}
  annotations: {{ dsc.ingress.annotations }}
  labels: {{ dsc.ingress.labels }}

postgresql:
  enabled: false

global:
  postgresql:
    dbUrl: "{% if pg_db_secret.resources == [] %}postgresql://username:password@host:port?schema=public{% else %}{{ (pg_db_secret | from_yaml | json_query('resources[0].data.uri') | b64decode + '?schema=public')}}{% endif %}"
  keycloak:
    clientIds:
      backend: {{ console_backend_secret.resources[0].data.CLIENT_ID | b64decode }}
      frontend: {{ console_frontend_secret.resources[0].data.CLIENT_ID | b64decode }}
    clientSecrets:
      backend: {{ console_backend_secret.resources[0].data.CLIENT_SECRET | b64decode }}
    redirectUri: https://{{ console_domain }}
    sessionSecret: {{ session_secret }}
    domain: "{{ keycloak_domain }}"
    realm: dso

server:
  envFrom:
    - secretRef:
        name: dso-config

cnpg:
  enabled: true
  nameOverride: pg-cluster-console
{% if dsc.global.backup.cnpg.enabled %}
  backup:
    enabled: "{{ dsc.global.backup.cnpg.enabled }}"
    destinationPath: "s3://{{ dsc.global.backup.cnpg.destinationPath }}"
    endpointURL: "{{ dsc.global.backup.cnpg.endpointURL }}"
    endpointCA:
      name: "bundle-cnpg-s3"
      key: "ca.pem"
    s3Credentials:
      name: "{{ dsc.global.backup.cnpg.s3Credentials.name }}"
      accessKeyId:
        key: "{{ dsc.global.backup.cnpg.s3Credentials.accessKeyId.key }}"
      secretAccessKey:
        key: "{{ dsc.global.backup.cnpg.s3Credentials.secretAccessKey.key }}"
    cron: "{{ dsc.global.backup.cnpg.cron }}"
    retentionPolicy: "{{ dsc.global.backup.cnpg.retentionPolicy }}"
{% endif %}
